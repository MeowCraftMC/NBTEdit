plugins {
    id "architectury-plugin" version "${architect_plugin_version}"
    id "dev.architectury.loom" version "${architectury_loom_version}" apply false
}

def ENV = System.getenv();

var publishVersion = project.mod_version
publishVersion += "+mc${project.minecraft_version}"
var mavenVersion = publishVersion
if (!ENV.MOD_RELEASE) {
    mavenVersion += '-SNAPSHOT'
}

ext.publishVersion = publishVersion
ext.mavenVersion = mavenVersion

subprojects {
    apply plugin: 'java'
    apply plugin: 'architectury-plugin'
    apply plugin: 'dev.architectury.loom'

    architectury {
        minecraft = project.minecraft_version
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_version}@zip")
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    processResources {
        var resourcesToReplace = ['build.properties', 'META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json']
        var replaceTokens = [
                minecraft_version: minecraft_version,
                mod_id: mod_id,
                mod_name: mod_name,
                mod_full_name: mod_full_name,
                mod_version: mod_version,
                fabric_loader_version: fabric_loader_version,
                fabric_api_version: fabric_api_version,
                forge_loader_version: forge_loader_version,
                forge_version: forge_version,
                neoforge_loader_version: neoforge_loader_version,
                neoforge_version: neoforge_version,
                next_minecraft_version: next_minecraft_version,
                next_forge_loader_version: next_forge_loader_version,
                next_forge_version: next_forge_version,
                next_neoforge_loader_version: next_neoforge_loader_version,
                next_neoforge_version: next_neoforge_version
        ]

        inputs.properties replaceTokens
        filesMatching(resourcesToReplace) {
            expand replaceTokens
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

allprojects {
    apply plugin: 'maven-publish'

    group = 'cx.rain.mc.nbtedit'
    version = project.mod_version

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name = 'Mod Menu'
            url = 'https://maven.terraformersmc.com/releases'
        }

        maven {
            name = 'Curse maven'
            url = 'https://cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }

        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases/'
        }

        mavenCentral()
    }

    publishing {
        repositories {
            mavenLocal()

            maven {
                name = 'YuluoMaven'

                def releaseUrl = 'https://maven.yuluo.dev/repository/maven-releases/'
                def snapshotUrl = 'https://maven.yuluo.dev/repository/maven-snapshots/'
                url = ENV.MOD_RELEASE ? releaseUrl : snapshotUrl

                credentials {
                    username ENV.MOD_MAVEN_USER
                    password ENV.MOD_MAVEN_PASS
                }
            }
        }
    }
}
